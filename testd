#!/usr/bin/perl

use strict;
use warnings;
use utf8;

use Clib::Proc qw|script0|;
use lib ROOT();
use Clib::Const ':utf8';
use Clib::Log 'log';
use Clib::BinProto;

use IO::Socket;
use IO::Select;
use JSON::XS;

$SIG{__DIE__} = sub { error('DIE: %s', $_) for @_ };


# Загрузка протокола обмена
my $precv = Clib::BinProto->new(
    '#',
    # Приветствие от устр-ва
    { s => 0x02, code => 'hello' },
    { s => 0x05, code => 'alive' },

    # request data
    { s => 0x0a, code => 'request',     pk => 'CNNNTC',     key => 'cmd,n1,n2,n3,tm,c' },
    # request logbook
    { s => 0x31, code => 'getlogbook',  pk => 'NN',         key => 'beg,count' },
    # request wifilist
    { s => 0x37, code => 'getwifilist' },
    # save wifilist
    { s => 0x41, code => 'savewifilist' },
    # request trklist
    { s => 0x51, code => 'gettrklist' },
    # request track
    { s => 0x54, code => 'gettrack',    pk => 'NNNTC',      key => 'id,jmpnum,jmpkey,tmbeg,fnum' },
    # save files
    { s => 0x5a, code => 'savefiles' },
);
my $psend = Clib::BinProto->new(
    '#',
    { s => 0x03, code => 'auth',        pk => 'Cn',         key => 'err,autokey' },

    # logbook
    { s => 0x31, code => 'logbookbeg',  pk => 'NN',         key => 'beg,count' },
    { s => 0x32, code => 'logbook',     pk => 'NNT' . ('NnaaiiNNNiiNNC nNNNNNN' x 4), # тут надо поправить - выровнять до NN байт ?
        key => 'num,key,dt,' . join(',',
                        map {
                            my $p=$_.'_';
                            join ',', map { $p.$_ } qw/
                                tmoffset flags state direct alt altspeed
                                lon lat hspeed heading gpsalt vspeed gpsdage sat
                                batval
                                hAcc vAcc sAcc cAcc
                                millis msave
                            /
                        }
                        qw/toff beg cnp end/) },
    { s => 0x33, code => 'logbookend' },

    # track
    { s => 0x34, code => 'datatrackbeg',pk=>'        NNT',
                                                        key => 'jmpnum,jmpkey,dtbeg' },
    { s => 0x35, code => 'datatrack', pk => 'NnaaiiNNNiiNNC nNNNNNN',
                        key => join(',', qw/
                                tmoffset flags state direct alt altspeed
                                lon lat hspeed heading gpsalt vspeed gpsdage sat
                                batval
                                hAcc vAcc sAcc cAcc
                                millis msave
                            /)
                        },
    { s => 0x36, code => 'datatrackend',pk=>'H',        key => 'chksum' },

    { s => 0x51, code => 'trklistbeg' },
    { s => 0x52, code => 'trklist',     pk=>'NNNNTNC',  key => 'id,flags,jmpnum,jmpkey,dtbeg,fsize,fnum' },
    { s => 0x53, code => 'trklistend' },
    { s => 0x54, code => 'trackbeg',    pk=>'NNNNTNH',  key => 'id,flags,jmpnum,jmpkey,dtbeg,fsize,chksum' },
    { s => 0x55, code => 'trackdata',   pk => 'NnaaiiNNNiiNNC nNNNNNN',
                                        key => join(',', qw/
                                                tmoffset flags state direct alt altspeed
                                                lon lat hspeed heading gpsalt vspeed gpsdage sat
                                                batval
                                                hAcc vAcc sAcc cAcc
                                                millis msave
                                            /) },
    { s => 0x56, code => 'trackend' },
);

# параметры процесса
Clib::Proc::daemon(
    pidfile => (c('pidPath')||'.').'/testd.pid',
    procname => 'xdeya-testd',
    no => c('nodaemon')
) || exit -1;

# серверный сокет
my $sockSrv = IO::Socket::INET->new(
                    Proto => 'tcp',
                    LocalPort => c('port'),
                    Listen => 10,
                    TimeOut => 4,
                    Reuse => 1,
                );
if (!$sockSrv) {
    error('Can\'t bind TCP port %s: %s', c('port'), $@);
    exit -1;
}

# сигнал прерывания процесса
Clib::Proc::sigint(sub {
    $sockSrv->close() if $sockSrv;
    undef $sockSrv;
});

log('Starting bind on port %s', c('port'));

# Преподготовка для форка
my $f = Clib::Proc->forkinit();
$f->onterm(sub {
    my %p = @_;
    debug('Terminated [%d] %s', $p{pid}, $p{ip});
});

# Основной цикл приёма входящих соединений
while ($sockSrv) {
    my $sock = $sockSrv->accept() || next;
    
    my $ip = $sock->peerhost();
    debug('Connect from %s', $ip);
    
    # Лимит по одновременным соединениям
    if (my $cnt = c('client_count')) {
        if ($f->chldcnt() >= $cnt) {
            error('client count limit exceed');
            $sock->shutdown(2);
            $sock->close();
            next;
        }
    }
    
    # форкаемся
    my $pid = $f->fork(ip => $ip) || return;
    if ($f->ischld()) {
        Clib::Log->prefix($pid . ' - ' . $ip);
        $0 .= ': '.$ip;
        $sockSrv->close();
        undef $sockSrv;
        
        # клиентский процесс
        cli_recv($sock);
        $sock->shutdown(2);
        $sock->close();
        last;
    }
    else {
        $sock->close();
    }
}

log('Finished');

exit 0;

# =========================================================
# чтение команд (клиентский обработчик)
# =========================================================
my $sock;

sub err { error(@_); return; }

sub snd {
    #my $sock = shift() || return;
    
    # Почему-то, если со стороны устройства соединение завершится
    # раньше намеченного, то соединение не закрывается, хотя
    # с той стороны close() выполняется.
    # И со стороны сервера сокет зависает на команде send()
    my $h = IO::Select->new($sock);
    $h->can_write(20) || return err('send wait timeout');
    
    my $ret = eval { $sock->send($psend->pack(@_)) };
    $ret || return err('Can\'t send: %s', $@||$!);
    1;
}

sub datadir {
    my $dir = c('datadir')
        || return err('Not defined `datadir` const');
    $dir = ROOT() . '/' . $dir if $dir !~ /^\//;
    (-d $dir)
        || return err('`datadir` not exists: %s', $dir);
    
    return $dir;
}

sub datadirlist {
    my $dir = datadir() || return;
    
    my $dh;
    opendir($dh, $dir)
        || return err('Can\'t open dir \'%s\': %s', $dir, $!);
    my $lst = [];
    while (defined(my $f = readdir $dh)) {
        next if $f =~ /^\./;
        push @$lst, $f;
    }
    closedir $dh;

    return $lst;
}

sub opendata {
    my $filename = shift();
    my $dir = datadir() || return;

    my $file = $dir . '/' . $filename;

    my $fh;
    open($fh, $file)
        || return err('Can\'t open file \'%s\': %s', $filename, $!);
    return $fh;
}

sub readbin {
    my $fh = shift();
    my $d;
    if ($fh->read($d, 2) != 2) {
        return err('readbin: can\'t get rec len');
    }
    my ($len) = unpack 'v', $d;
    if ((my $read = $fh->read($d, $len)) != $len) {
        return err('readbin: can\'t get rec data: need %d, read %d', $len, $read);
    }
    if ($fh->read($len, 2) != 2) {
        return err('readbin: can\'t get rec cksum');
    }

    return $d;
}

sub sethnd($) {
    #my $sock = shift() || return;
    my $hnd = shift() || return;

    (*$sock)->{hnd} = $hnd;
}

sub cli_recv {
    $sock = shift;
    my $shnd = IO::Select->new($sock);
    sethnd(\&hnd_hello); # текущий обработчик команд, он может меняться в процессе

    # сигнал прерывания процесса
    my $run = 1;
    Clib::Proc::sigint(sub { undef $run; });
    
    # приёмник команд
    my $data = ''; # бинарный поток команд
    my @data = (); # распакованный поток команд
    
    (*$sock)->{reader} = sub {
        $data .= $_[0];
        
        # распаковка
        my $p = $precv->unpack($data);
        if (!$p) {
            # ошибка распаковки
            error('proto error: %s', $_) foreach $precv->error();
            error('proto unknown error') if !$precv->error();
            return;
        }
        
        push @data, @$p;
        # Обрабатываем команды
        while (@data) {
            my $d = shift @data;
            my $ok = (*$sock)->{hnd}->($sock, $d);
            $ok || return err('pkt hnd fail on: %s', $d->{code}); # обработчик вернул ошибку
            if (!defined((*$sock)->{hnd})) {
                undef $run;
                last;
            }
        }
        
        1;
    };
    
    my $timeout = c('timeout');
    my $tout = time() + $timeout;
    while ($run && $sock && $shnd && $shnd->handles()) {
        if ($tout < time()) {
            log('client read timeout');
            last;
        }
        
        my @sock = $shnd->can_read(1);
        
        foreach my $s (@sock) {
            $run || last;
            my $buf; #  получение из сокета
            my $r = $s->recv($buf, 1024);
            if (!defined($r)) {
                error('sock recv fail: %s', $!);
                $shnd->remove($s);
                close $s;
                next;
            }
            
            my $err = '';
            my $ok = (*$s)->{reader}->($buf, $err);
            if (!$ok) {
                error('sock reader fail: %s', $err) if $err;
                undef $run;
                last;
            }
            
            $tout = time() + $timeout;
        }
    }
    
    foreach my $s ($shnd->handles()) {
        $shnd->remove($s);
        $s->shutdown(2);
        $s->close();
        if (my $d = (*$s)->{destroy}) {
            $d->();
        }
    }
    undef $sock;
    undef $shnd;
}

sub json2data {
    my $json = shift();
    my $data = eval { JSON::XS->new->utf8->decode($json); };
    $data || return err('JSON-decode fail: %s', $@);
    return $data;
}

sub data2json {
    my $data = shift();
    if ((ref($data) ne 'HASH') && (ref($data) ne 'ARRAY')) {
        return err('JSON-encode fail: data is not HASH and is not ARRAY');
    }
    my $json = eval { JSON::XS->new->utf8->pretty(0)->canonical->encode($data); };
    $json || return err('JSON-encode fail: %s', $@);
    return $json;
}

# =========================================================
#  Приветствие, инициализация
# =========================================================
sub hnd_hello {
    my $sock = shift();
    my $d = shift();
    my $lpref = log_prefix('hnd_hello');
    dumper 'recv' => $d;
    
    if ($d->{code} eq 'hello') {
        snd(auth => { err => 0, autokey => 0 }) || return;
        sethnd(\&hnd_main);
    }
    else {
        return;
    }
    
    1;
}

# =========================================================
#  Основной цикл
# =========================================================
sub hnd_main {
    my $sock = shift();
    my $d = shift();
    my $lpref = log_prefix('hnd_main');
    dumper 'recv' => $d;

    #dumper data => Clib::Const::parse(c('datadir'));
    if ($d->{code} eq 'request') {
        if ($d->{cmd} == 0x31) {
            sendLogBook($d->{n1}, $d->{n2});
        }
        elsif ($d->{cmd} == 0x37) {
            sendWiFiPass();
        }
        elsif ($d->{cmd} == 0x51) {
            sendTrackList();
        }
        elsif ($d->{cmd} == 0x54) {
            sendTrack($d->{n1}, $d->{n2}, $d->{n3}, $d->{tm}, $d->{c});
        }
        elsif ($d->{cmd} == 0x5a) {
            sendFiles();
        }
    }
    elsif ($d->{code} eq 'getlogbook') {
        sendLogBook($d->{beg}, $d->{count});
    }
    elsif ($d->{code} eq 'getwifilist') {
        sendWiFiPass();
    }
    elsif ($d->{code} eq 'savewifilist') {
        recvWiFiPass();
    }
    elsif ($d->{code} eq 'gettrklist') {
        sendTrackList();
    }
    elsif ($d->{code} eq 'gettrack') {
        sendTrack($d->{id}, $d->{jmpnum}, $d->{jmpkey}, $d->{tmbeg}, $d->{fnum});
    }
    elsif ($d->{code} eq 'savefiles') {
        recvFiles();
    }

    return 1;
}

sub sendLogBook {
    my ($beg, $count) = @_;

    snd(logbookbeg => { beg => $beg, count => $count });
    {
        my $fh = opendata('logsimple.01') || last;
        my %v = ();
        my @var =
            map { \$v{$_} }
            (
                qw/num key dt_year dt_mon dt_day dt_h dt_m dt_s dt_tick/,
                map {
                    my $p=$_.'_';
                    map { $p.$_ } qw/
                        tmoffset flags state direct alt altspeed
                        lon lat hspeed heading gpsalt vspeed gpsdage sat
                        _
                        batval
                        hAcc vAcc sAcc cAcc
                        millis msave
                    /
                }
                qw/toff beg cnp end/
            );

        while (!$fh->eof()) {
            my $data = readbin($fh) || last;
            # net:           'NNT'       . ('NnaaiiNNNiiNNC nNNNNNN' x 4)
            my @val = unpack 'VVvCCCCCC' . ('VvaavvVVVssVVCCvVVVVVV' x 4), $data;
            #dumper val => \@val;
            $$_ = shift(@val) foreach @var;
            my %v1 = %v;
            my @dt = map { delete $v1{'dt_'.$_} } qw/year mon day h m s tick/;
            pop @dt;
            $v1{dt} = sprintf '%d-%02d-%02d %d:%02d:%02d', @dt;
            #dumper v => \%v1;
            snd(logbook => \%v1);
        }

        close $fh;
    }
    snd(logbookend => {});
}

sub sendWiFiPass {

}

sub opentrack {
    my $fname = shift;
    my $v = {};
    $v->{fnum}  = int($1) if $fname =~ /\.(\d+)$/;
    $v->{fsize} = -s datadir() . '/' . $fname;
    $v->{fh}    = opendata($fname) || return;

    my $data = readbin($v->{fh}) || return;
    my @val = unpack 'VVVVvCCCCC', $data;
    $v->{$_} = shift(@val) foreach qw/id flags jmpnum jmpkey/;
    $v->{dtbeg} = sprintf '%d-%02d-%02d %d:%02d:%02d', @val;
    $v->{chksum} = 0;

    return $v;
}

sub sendTrackList {
    snd(trklistbeg => {});
    {
        my $flist = datadirlist() || last;
        @$flist =
            sort
            grep { /^track\.\d+$/ }
            @$flist;
        foreach my $fname (@$flist) {
            my $v = opentrack($fname) || next;
            snd(trklist => $v);
        }
    }
    snd(trklistend => {});
}

sub sendTrack {
    my ($id, $jmpnum, $jmpkey, $tmbeg, $fnum) = @_;
        my @f =
                    qw/
                        tmoffset flags state direct alt altspeed
                        lon lat hspeed heading gpsalt vspeed gpsdage sat
                        _
                        batval
                        hAcc vAcc sAcc cAcc
                        millis msave
                    /;

    my $v = opentrack(sprintf('track.%02d', $fnum)) || last;
    snd(trackbeg => $v);
    {
        while (!$v->{fh}->eof()) {
            my $data = readbin($v->{fh}) || last;
            my @val = unpack 'VvaavvVVVssVVCCvVVVVVV', $data;
            my %d = ();
            $d{$_} = shift(@val) foreach @f;

            snd(trackdata => \%d) || last;
        }
    }
    snd(trackend => {});
}

sub sendFiles {

}

sub recvWiFiPass {

}

sub recvFiles {

}

#==========================================================
#================================================== End ===
#==========================================================
